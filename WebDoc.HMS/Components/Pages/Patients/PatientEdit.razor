@page "/patients/add"
@page "/patients/edit/{PatientId:int}"
@using Services
@using Models
@using Layout
@layout CustomLayout
@inject PatientService PatientService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>@(PatientId == 0 ? "Add Patient" : "Edit Patient")</PageTitle>

<h3>@(PatientId == 0 ? "Add Patient" : "Edit Patient")</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="patient" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="patient.Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Date of Birth</label>
        <InputDate class="form-control" @bind-Value="patient.DateOfBirth" />
    </div>
   @*  <div class="mb-3">
        <label class="form-label">Gender</label>
        <InputText class="form-control" @bind-Value="patient.Gender" />
    </div> *@

    <div class="mb-3">

        <label class="form-label">Gender</label>
        <InputSelect class="form-control" @bind-Value="patient.Gender">
            <option value="">-- Select Gender --</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Contact</label>
        <InputText class="form-control" @bind-Value="patient.Contact" />
    </div>
    <div class="mb-3">
        <label class="form-label">Address</label>
        <InputText class="form-control" @bind-Value="patient.Address" />
    </div>
    <button type="submit" class="btn btn-danger">Save</button>
    <a href="/patients" class="btn btn-dark">Cancel</a>
</EditForm>

@code {
    [Parameter]
    public int PatientId { get; set; }

    private Patient patient = new();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (PatientId != 0)
        {
            try
            {
                patient = (await PatientService.GetPatientsAsync()).FirstOrDefault(p => p.PatientId == PatientId) ?? new Patient();
                if (patient.PatientId == 0)
                    errorMessage = $"Patient with ID {PatientId} not found.";
            }
            catch (Exception ex)
            {
                errorMessage = $"Error loading patient: {ex.Message}";
            }
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (PatientId == 0)
            {
                await PatientService.AddPatientAsync(patient);
            }
            else
            {
                patient.PatientId = PatientId;
                await PatientService.UpdatePatientAsync(patient);
            }
            NavigationManager.NavigateTo("/patients");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving patient: {ex.Message}";
        }
    }
}